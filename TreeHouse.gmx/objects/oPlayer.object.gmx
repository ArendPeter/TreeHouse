<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dx = 0;
dy = 0;
inv = 0;
maxInv = 1000;

currentPlayerDamage = 30;
maxHP = 150;
currentHP = 150;
snapCamera();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ApplyPlayerMovement();
AlignCameraWithPlayer();

image_angle = point_direction(x,y,mouse_x,mouse_y);

if(place_meeting(x,y,oQueen)){
    var dir = point_direction(x,y,oQueen.x,oQueen.y);
    x-=lengthdir_x(5,dir);
    y-=lengthdir_y(5,dir);  
}

var distToQueen = point_distance(x,y,oQueen.x,oQueen.y);
var orbRate = max(4,min(30,.2 * inv));
if(distToQueen &lt; 80 * oQueen.scale &amp;&amp; inv &gt;= orbRate){
    orbRate = min(inv,orbRate);    
    repeat(orbRate){
        instance_create(x,y,oOrb);
    }
    inv-=orbRate;
}

if(keyboard_check(ord('R'))){
    var dist = point_distance(x,y,oQueen.x,oQueen.y);
    if( dist &gt; 100*oQueen.scale){
        var dir = point_direction(x,y,oQueen.x,oQueen.y);
        x += lengthdir_x(min(50,dist),dir);
        y += lengthdir_y(min(50,dist),dir);
        image_angle = dir;
    }
}

if(keyboard_check(ord('O'))){
    repeat(10){
        instance_create(x,y,oOrb);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
