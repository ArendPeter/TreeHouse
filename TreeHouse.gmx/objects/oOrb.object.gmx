<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sOrb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = random(360);
sp = 4 + random(8);
x+=4+random(24);
y+=4+random(24);
accToDest = 3;
dx = lengthdir_x(sp,dir);
dy = lengthdir_y(sp,dir);
l = 0;
runningTimer = 10;

if(point_distance(x,y,oQueen.x,oQueen.y)&lt;100*oQueen.scale){
    destObj = oQueen;
}else{
    destObj = oPlayer;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(oPlayer))
    exit;

runningTimer--;
accToDest+=.3;

l+=.002;
l = min(l,1);


if(oPlayer.inv == oPlayer.maxInv){
    dx *= .95;
    dy *= .95;
    if(dx &lt; .1) dx = 0;
    if(dy &lt; .1) dy = 0;
}else{
    var distToDest = point_distance(x,y,destObj.x,destObj.y);
    var dirToDest = point_direction(x,y,destObj.x,destObj.y);
    accToDest = min(distToDest,accToDest);
    ddx = lengthdir_x(accToDest,dirToDest);
    ddy = lengthdir_y(accToDest,dirToDest);
    dx = (dx+ddx) * (1-l) + l * ddx;
    dy = (dy+ddy) * (1-l) + l * ddy;
        
    distToDest = point_distance(x,y,destObj.x,destObj.y);
    var runningAway = runningTimer &gt; 0;
    if(distToDest&lt;20 &amp;&amp; !runningAway){
        if(destObj==oPlayer){
            oPlayer.inv++;
        }else{
            oQueen.orbs++;
        }
        instance_destroy();
    }
}
x+=dx;
y+=dy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
