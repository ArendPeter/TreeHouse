<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sQueen_size1</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>startTime = current_time;
scale = 1;
maxScale = 4;
orbsTillFullGrown = 1700;
stage = 0;
hunger = 0;
orbs = 0;
frame = 0;
frameSpeed = .5;
hp = 100;
finalScene = false;
dying = false;

ori_spr[0] = sQueen_mouth1;
ori_spr[1] = sQueen_mouth2;
ori_spr[2] = sQueen_mouth4;
ori_spr[3] = sQueen_mouth4_2;
ori_spr[4] = sQueen_eye1;
ori_spr[5] = sQueen_eye2;
ori_spr[6] = sQueen_eye3;
ori_spr[7] = sQueen_eye4;

ori_stg[0] = 0;
ori_stg[1] = 1;
ori_stg[2] = 3;
ori_stg[3] = 3;
ori_stg[4] = 0;
ori_stg[5] = 1;
ori_stg[6] = 2;
ori_stg[7] = 3;

for(var i = 0; i &lt; 8; i++){
    ori_frame[i] = 0;
    ori_timer[i] = room_speed * random(5)
}

spawning = false;
spawnFrame = 0;

colors[0] = $FF8800;
colors[1] = $FFFF00;
colors[2] = $FFFF88;
colors[3] = $FFFFFF;
colors[4] = $FF0000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>orbs = min(orbs,orbsTillFullGrown);
scale = 1 + (maxScale-1) * sin(((2 * pi)*orbs)/(4*orbsTillFullGrown));

if(((scale-1) / (maxScale-1)) &gt; (stage + 1)/4){
    stage++;
    switch(stage){
        case 0: sprite_index = sQueen_size1; break;
        case 1: sprite_index = sQueen_size2; break;
        case 2: sprite_index = sQueen_size3; break;
        case 3: sprite_index = sQueen_size4; break;
    }
}

image_xscale = scale;
image_yscale = scale;

if(finalScene &amp;&amp; (frame + frameSpeed) &gt;= image_number){
    room_goto_next();
}

if(dying &amp;&amp; (frame + frameSpeed) &gt;= image_number){
    game_restart();
}

if(dying &amp;&amp; !oGameControl.cameraOnQueen){
    frame = 0;
}

//update frames
if(!finalScene || oGameControl.cameraOnQueen)
frame = (frame + frameSpeed) % sprite_get_number(sprite_index);

if(!spawning &amp;&amp; !finalScene &amp;&amp; !oGameControl.titleScreen &amp;&amp; !instance_exists(oPlayer) &amp;&amp; 
        oGameControl.cameraOnQueen){
    spawning = true; 
    spawnFrame = 0;
}

if(spawning){
    spawnFrame += .5;
    if(spawnFrame &gt;= 13){
        instance_create(x+(-5+9)*scale*.8+115,y+(-12+4)*scale*.8,oPlayer)
        spawning = false;
    }
}

if(!oGameControl.titleScreen &amp;&amp; !finalScene &amp;&amp; !dying){
    hp -= (1/30);
    if(oGameControl.debug &amp;&amp; keyboard_check(ord('F')))
        hp -= 49*(scale/30);
    if(hp &lt; 0){
        dying = true;
        frame = 0;
    }
}


maxBlend = c_white;
minBlend = $AA8888;
var b = min(100,hp)/100;
image_blend = make_color_rgb(
    color_get_red(minBlend) * (1-b) + color_get_red(maxBlend) * b,
    color_get_green(minBlend) * (1-b) + color_get_green(maxBlend) * b,
    color_get_blue(minBlend) * (1-b) + color_get_blue(maxBlend) * b,
);

if(instance_exists(oPlayer) &amp;&amp; !finalScene &amp;&amp; point_distance(x,y,oPlayer.x,oPlayer.y) &lt; 400 &amp;&amp; orbs == orbsTillFullGrown){
    finalScene = true;
    frame = 0;
    with(oPlayer) instance_destroy();
    sprite_index = sSceneBirth;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(finalScene){
    draw_sprite_ext(sprite_index,frame,x,y,1,1,0,$FFFFFF,1);
    exit;
}


if(!dying || frame &lt; 10){

draw_sprite_ext(sprite_index,frame,x,y,scale,scale,0,image_blend,1);

//oriphi
for(var i = 0; i &lt; 8; i++){
    if(i==0 &amp;&amp; spawning)
        continue;
    if(stage &gt;= ori_stg[i]){
        draw_sprite_ext(ori_spr[i],0,
            x-5 + (i==2)*-16 + (i==6)*16,
            y-12 + (i==2)*16,
            scale*.8,scale*.8,0,image_blend,1);
    }
}

//spawn
if(spawning){
    draw_sprite_ext(sQueen_spawnMouth,min(12,spawnFrame),
        x+(-5+9)*scale*.8,y+(-12+4)*scale*.8,
        scale*.8,scale*.8,0,image_blend,1);
    draw_sprite(sQueen_spawnPlayer,min(13,spawnFrame),
        x+(-5+9)*scale*.8,y+(-12+4)*scale*.8);
}

}
if(dying){
    draw_sprite_ext(sSceneDeath,frame,x,y,scale,scale,0,$FFFFFF,1);
}

//hp
if(oGameControl.titleScreen || dying) exit;
var l = array_length_1d(colors)
var backColor = colors[(hp div 100)%(l-1)];
var foreColor = colors[((hp div 100) +1)%(l-1)];

if(hp div 100 == 0) backColor = colors[l-1];

draw_set_color(colors[l-1]);
draw_rectangle(
    x -sprite_width/2  - 5,
    y -sprite_height/1.5-5,
    x +sprite_width/2  + 5,
    y -sprite_height/1.5 +25,
    false);
draw_set_color(backColor);
draw_rectangle(
    x -sprite_width/2  ,
    y -sprite_height/1.5 ,
    x +sprite_width/2,
    y -sprite_height/1.5 +20,
    false);
draw_set_color(foreColor);
draw_rectangle(
    x -sprite_width/2  ,
    y -sprite_height/1.5 ,
    x -sprite_width/2  + sprite_width * (hp % 100)/100,
    y -sprite_height/1.5 +20,
    false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
